/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.mh.examples.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Address extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3108285537194993870L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Address\",\"namespace\":\"de.mh.examples.avro\",\"fields\":[{\"name\":\"street\",\"type\":{\"type\":\"string\",\"logicalType\":\"custom-street\"},\"doc\":\"Street format ending with house number\"},{\"name\":\"zipcode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Zip Code\"},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"City\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Address> ENCODER =
      new BinaryMessageEncoder<Address>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Address> DECODER =
      new BinaryMessageDecoder<Address>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Address> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Address> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Address>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Address to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Address from a ByteBuffer. */
  public static Address fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Street format ending with house number */
  @Deprecated public Street street;
  /** Zip Code */
  @Deprecated public java.lang.String zipcode;
  /** City */
  @Deprecated public java.lang.String city;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Address() {}

  /**
   * All-args constructor.
   * @param street Street format ending with house number
   * @param zipcode Zip Code
   * @param city City
   */
  public Address(Street street, java.lang.String zipcode, java.lang.String city) {
    this.street = street;
    this.zipcode = zipcode;
    this.city = city;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return street;
    case 1: return zipcode;
    case 2: return city;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: street = (Street)value$; break;
    case 1: zipcode = (java.lang.String)value$; break;
    case 2: city = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'street' field.
   * @return Street format ending with house number
   */
  public Street getStreet() {
    return street;
  }

  /**
   * Sets the value of the 'street' field.
   * Street format ending with house number
   * @param value the value to set.
   */
  public void setStreet(Street value) {
    this.street = value;
  }

  /**
   * Gets the value of the 'zipcode' field.
   * @return Zip Code
   */
  public java.lang.String getZipcode() {
    return zipcode;
  }

  /**
   * Sets the value of the 'zipcode' field.
   * Zip Code
   * @param value the value to set.
   */
  public void setZipcode(java.lang.String value) {
    this.zipcode = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return City
   */
  public java.lang.String getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * City
   * @param value the value to set.
   */
  public void setCity(java.lang.String value) {
    this.city = value;
  }

  /**
   * Creates a new Address RecordBuilder.
   * @return A new Address RecordBuilder
   */
  public static de.mh.examples.avro.Address.Builder newBuilder() {
    return new de.mh.examples.avro.Address.Builder();
  }

  /**
   * Creates a new Address RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Address RecordBuilder
   */
  public static de.mh.examples.avro.Address.Builder newBuilder(de.mh.examples.avro.Address.Builder other) {
    return new de.mh.examples.avro.Address.Builder(other);
  }

  /**
   * Creates a new Address RecordBuilder by copying an existing Address instance.
   * @param other The existing instance to copy.
   * @return A new Address RecordBuilder
   */
  public static de.mh.examples.avro.Address.Builder newBuilder(de.mh.examples.avro.Address other) {
    return new de.mh.examples.avro.Address.Builder(other);
  }

  /**
   * RecordBuilder for Address instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Address>
    implements org.apache.avro.data.RecordBuilder<Address> {

    /** Street format ending with house number */
    private Street street;
    /** Zip Code */
    private java.lang.String zipcode;
    /** City */
    private java.lang.String city;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.mh.examples.avro.Address.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.street)) {
        this.street = data().deepCopy(fields()[0].schema(), other.street);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.zipcode)) {
        this.zipcode = data().deepCopy(fields()[1].schema(), other.zipcode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Address instance
     * @param other The existing instance to copy.
     */
    private Builder(de.mh.examples.avro.Address other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.street)) {
        this.street = data().deepCopy(fields()[0].schema(), other.street);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.zipcode)) {
        this.zipcode = data().deepCopy(fields()[1].schema(), other.zipcode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'street' field.
      * Street format ending with house number
      * @return The value.
      */
    public Street getStreet() {
      return street;
    }

    /**
      * Sets the value of the 'street' field.
      * Street format ending with house number
      * @param value The value of 'street'.
      * @return This builder.
      */
    public de.mh.examples.avro.Address.Builder setStreet(Street value) {
      validate(fields()[0], value);
      this.street = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'street' field has been set.
      * Street format ending with house number
      * @return True if the 'street' field has been set, false otherwise.
      */
    public boolean hasStreet() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'street' field.
      * Street format ending with house number
      * @return This builder.
      */
    public de.mh.examples.avro.Address.Builder clearStreet() {
      street = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'zipcode' field.
      * Zip Code
      * @return The value.
      */
    public java.lang.String getZipcode() {
      return zipcode;
    }

    /**
      * Sets the value of the 'zipcode' field.
      * Zip Code
      * @param value The value of 'zipcode'.
      * @return This builder.
      */
    public de.mh.examples.avro.Address.Builder setZipcode(java.lang.String value) {
      validate(fields()[1], value);
      this.zipcode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'zipcode' field has been set.
      * Zip Code
      * @return True if the 'zipcode' field has been set, false otherwise.
      */
    public boolean hasZipcode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'zipcode' field.
      * Zip Code
      * @return This builder.
      */
    public de.mh.examples.avro.Address.Builder clearZipcode() {
      zipcode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * City
      * @return The value.
      */
    public java.lang.String getCity() {
      return city;
    }

    /**
      * Sets the value of the 'city' field.
      * City
      * @param value The value of 'city'.
      * @return This builder.
      */
    public de.mh.examples.avro.Address.Builder setCity(java.lang.String value) {
      validate(fields()[2], value);
      this.city = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * City
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'city' field.
      * City
      * @return This builder.
      */
    public de.mh.examples.avro.Address.Builder clearCity() {
      city = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Address build() {
      try {
        Address record = new Address();
        record.street = fieldSetFlags()[0] ? this.street : (Street) defaultValue(fields()[0]);
        record.zipcode = fieldSetFlags()[1] ? this.zipcode : (java.lang.String) defaultValue(fields()[1]);
        record.city = fieldSetFlags()[2] ? this.city : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Address>
    WRITER$ = (org.apache.avro.io.DatumWriter<Address>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Address>
    READER$ = (org.apache.avro.io.DatumReader<Address>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  protected static final CustomConversions.StreetConversion STREET_CONVERSION = new CustomConversions.StreetConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
          new org.apache.avro.Conversion<?>[] {
                  STREET_CONVERSION,
                  null,
                  null
          };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }
}
